# /docker/n8n/compose.yml
# Integriert n8n in den bestehenden Proxy- und Home-Automation-Stack.

services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    labels:
      - "diun.enable=true"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    networks:
      - ha-intern
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    image: docker.n8n.io/n8nio/n8n:1.115.3-arm64
    container_name: n8n
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - GENERIC_TIMEZONE="Europe/Berlin"
      - TZ=${TZ}
      - WEBHOOK_URL=https://n8n.${DOMAIN_PUBLIC}/
      - N8N_PROXY_HOPS=1
      # --- STABLE AUTH CONFIGURATION ---
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_JWT_SECRET=${N8N_JWT_SECRET}
      # --- END STABLE AUTH ---
      - N8N_RUNNERS_ENABLED=true
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=false
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      # Persistenter Speicher für n8n-Daten (Workflows, Credentials, etc.)
      - ./n8n-data:/home/node/.n8n
    networks:
      - proxy-netzwerk
      - ha-intern
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:5678/healthz"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s # Gibt dem Container 60s Zeit für die Migrationen
    labels:
      - "diun.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.n8n-main.rule=Host(`n8n.${DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.n8n-main.entrypoints=websecure"
      - "traefik.http.routers.n8n-main.tls=true"
      - "traefik.http.routers.n8n-main.tls.certresolver=letsencrypt"
      - "traefik.http.routers.n8n-main.service=n8n-service"
      
      # --- MIDDLEWARE CHAIN ---
      # Define the CSP middleware to allow embedding in Home Assistant
      - "traefik.http.middlewares.iframe-headers.headers.contentSecurityPolicy=frame-ancestors 'self' https://home.${DOMAIN_PUBLIC}"
      - "traefik.http.routers.n8n-main.middlewares=iframe-headers@docker"
      
      # --- Service Definition (shared by both routers) ---
      - "traefik.http.services.n8n-service.loadbalancer.server.port=5678"

networks:
  proxy-netzwerk:
    external: true
  ha-intern:
    external: true

volumes:
  postgres_data:
